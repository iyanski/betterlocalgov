// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  domain      String?  // Optional domain for organization
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  // Relations
  creator     User?    @relation("CreatedBy", fields: [createdBy], references: [id])
  updater     User?    @relation("UpdatedBy", fields: [updatedBy], references: [id])
  users       User[]
  contentTypes ContentType[]
  documentTypes DocumentType[]
  categories  Category[]
  tags        Tag[]
  content     Content[]
  documents   Document[]
  media       Media[]

  // Performance indexes
  @@index([slug])
  @@index([isActive])
  @@map("organizations")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  username       String   @unique
  password       String
  firstName      String?
  lastName       String?
  role           UserRole @default(EDITOR)
  isActive       Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdContent Content[] @relation("CreatedBy")
  updatedContent Content[] @relation("UpdatedBy")
  createdContentTypes ContentType[] @relation("CreatedBy")
  updatedContentTypes ContentType[] @relation("UpdatedBy")
  createdDocumentTypes DocumentType[] @relation("DocumentTypeCreatedBy")
  updatedDocumentTypes DocumentType[] @relation("DocumentTypeUpdatedBy")
  createdDocuments Document[] @relation("DocumentCreatedBy")
  updatedDocuments Document[] @relation("DocumentUpdatedBy")
  createdMedia   Media[] @relation("CreatedBy")
  updatedMedia   Media[] @relation("UpdatedBy")
  createdCategories Category[] @relation("CreatedBy")
  updatedCategories Category[] @relation("UpdatedBy")
  createdTags    Tag[] @relation("CreatedBy")
  updatedTags    Tag[] @relation("UpdatedBy")
  createdOrganizations Organization[] @relation("CreatedBy")
  updatedOrganizations Organization[] @relation("UpdatedBy")

  // Performance indexes
  @@index([email])
  @@index([organizationId])
  @@index([isActive])
  @@index([organizationId, isActive])
  @@map("users")
}

model ContentType {
  id             String   @id @default(cuid())
  name           String
  slug           String
  description    String?
  fields         Json     // Array of field definitions
  isActive       Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  creator        User         @relation("CreatedBy", fields: [createdBy], references: [id])
  updater        User         @relation("UpdatedBy", fields: [updatedBy], references: [id])
  content        Content[]

  // Performance indexes
  @@index([organizationId])
  @@index([organizationId, slug])
  @@unique([organizationId, slug])
  @@map("content_types")
}

model Category {
  id             String   @id @default(cuid())
  name           String
  slug           String
  description    String?
  color          String?  // Hex color for UI
  isActive       Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  creator        User         @relation("CreatedBy", fields: [createdBy], references: [id])
  updater        User         @relation("UpdatedBy", fields: [updatedBy], references: [id])
  content        ContentCategory[]
  documents      DocumentCategory[]

  // Performance indexes
  @@index([organizationId])
  @@index([organizationId, slug])
  @@index([isActive])
  @@unique([organizationId, slug])
  @@map("categories")
}

model Tag {
  id             String   @id @default(cuid())
  name           String
  slug           String
  description    String?
  color          String?  // Hex color for UI
  isActive       Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  creator        User         @relation("CreatedBy", fields: [createdBy], references: [id])
  updater        User         @relation("UpdatedBy", fields: [updatedBy], references: [id])
  content        ContentTag[]
  documents      DocumentTag[]

  // Performance indexes
  @@index([organizationId])
  @@index([organizationId, slug])
  @@index([isActive])
  @@unique([organizationId, slug])
  @@map("tags")
}

model Content {
  id             String        @id @default(cuid())
  title          String
  slug           String
  content        Json?          // Dynamic content based on content type fields
  status         ContentStatus @default(DRAFT)
  publishedAt    DateTime?
  contentTypeId  String
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  contentType    ContentType   @relation(fields: [contentTypeId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  creator        User          @relation("CreatedBy", fields: [createdBy], references: [id])
  updater        User          @relation("UpdatedBy", fields: [updatedBy], references: [id])
  media          ContentMedia[]
  categories     ContentCategory[]
  tags           ContentTag[]

  // Performance indexes
  @@index([organizationId])
  @@index([status])
  @@index([contentTypeId])
  @@index([publishedAt])
  @@index([organizationId, status])
  @@index([organizationId, status, publishedAt])
  @@unique([organizationId, slug])
  @@map("content")
}

model ContentMedia {
  id        String   @id @default(cuid())
  contentId String
  mediaId   String
  fieldName String   // Which field in the content this media belongs to
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([contentId])
  @@index([mediaId])
  @@index([fieldName])
  @@unique([contentId, mediaId, fieldName])
  @@map("content_media")
}

model ContentCategory {
  id         String   @id @default(cuid())
  contentId  String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([contentId])
  @@index([categoryId])
  @@unique([contentId, categoryId])
  @@map("content_categories")
}

model ContentTag {
  id        String   @id @default(cuid())
  contentId String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([contentId])
  @@index([tagId])
  @@unique([contentId, tagId])
  @@map("content_tags")
}

model Media {
  id             String   @id @default(cuid())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  path           String
  url            String
  alt            String?
  caption        String?
  width          Int?
  height         Int?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  creator        User         @relation("CreatedBy", fields: [createdBy], references: [id])
  updater        User         @relation("UpdatedBy", fields: [updatedBy], references: [id])
  content        ContentMedia[]
  documents      DocumentMedia[]

  // Performance indexes
  @@index([organizationId])
  @@index([mimeType])
  @@index([createdAt])
  @@index([organizationId, createdAt])
  @@map("media")
}

enum UserRole {
  OWNER
  EDITOR
	VIEWER
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model DocumentType {
  id             String   @id @default(cuid())
  title          String
  slug           String   @unique
  description    String?
  fields         Json?    // Form field definitions from FormBuilder
  isActive       Boolean  @default(true)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  creator        User         @relation("DocumentTypeCreatedBy", fields: [createdBy], references: [id])
  updater        User         @relation("DocumentTypeUpdatedBy", fields: [updatedBy], references: [id])
  documents      Document[]

  // Performance indexes
  @@index([organizationId])
  @@index([slug])
  @@index([isActive])
  @@index([createdBy])
  @@map("document_types")
}

model Document {
  id             String   @id @default(cuid())
  title          String
  slug           String
  content        Json?    // Dynamic content based on document type fields
  status         ContentStatus @default(DRAFT)
  publishedAt    DateTime?
  documentTypeId String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  updatedBy      String

  // Relations
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  creator        User         @relation("DocumentCreatedBy", fields: [createdBy], references: [id])
  updater        User         @relation("DocumentUpdatedBy", fields: [updatedBy], references: [id])
  media          DocumentMedia[]
  categories     DocumentCategory[]
  tags           DocumentTag[]

  // Performance indexes
  @@index([documentTypeId])
  @@index([organizationId])
  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([createdBy])
  @@map("documents")
}

model DocumentMedia {
  id        String   @id @default(cuid())
  documentId String
  mediaId   String
  fieldName String   // Which field in the document this media belongs to
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  document  Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([documentId])
  @@index([mediaId])
  @@index([fieldName])
  @@unique([documentId, mediaId, fieldName])
  @@map("document_media")
}

model DocumentCategory {
  id         String   @id @default(cuid())
  documentId String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([documentId])
  @@index([categoryId])
  @@unique([documentId, categoryId])
  @@map("document_categories")
}

model DocumentTag {
  id        String   @id @default(cuid())
  documentId String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  document  Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([documentId])
  @@index([tagId])
  @@unique([documentId, tagId])
  @@map("document_tags")
}